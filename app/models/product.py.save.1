from flask import current_app as app
from flask_login import login_user, logout_user, current_user
#user = current_user._get_current_object()
#user_id = user.id

'''
CREATE TABLE Products (
    product_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    seller_id INT NOT NULL REFERENCES Sellers(id),
    name VARCHAR(255) NOT NULL,
    quantity INTEGER NOT NULL,
    category VARCHAR(256) NOT NULL,
    description VARCHAR(4096) NOT NULL, 
    price FLOAT NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    image VARCHAR(256) NOT NULL,    
    CHECK (quantity >= 0),
    CHECK (price >= 0)
);
'''

class Product:
    def __init__(self, product_id, seller_id, name, quantity, category, description, price, available, image):
        self.product_id = product_id
        self.seller_id = seller_id
        self.name = name
        self.quantity = quantity
        self.category = category
        self.description = description
        self.price = price
        self.available = available
        self.image = image


    @staticmethod
    def get(product_id):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE product_id = :product_id
''',
                              product_id=product_id)
        return Product(*(rows[0])) if rows is not None else None

    @staticmethod
    def get_all(available=True):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE available = :available
''',
                              available=available)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_all_byseller(available, seller_id):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE  available = :available
AND seller_id = :seller_id
''',
                              available=available,
                              seller_id=seller_id)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_name(name):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE name = :name
''',
                              name=name)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_category(category):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE category = :category
''',
                              category=category)
        return [Product(*row) for row in rows]


    def addProduct(seller_id, name, quantity, category, description, price, available, image):
        try: 
            rows = app.db.execute('''
            INSERT INTO Products(seller_id, name, quantity, category, description, price, available, image)
            VALUES(:seller_id, :name, :quantity, :category, :description, :price, :available, :image)
            ''',
            seller_id=seller_id,
            name=name,
            quantity=quantity,
            category=category,
            description=description,
            price=price,
            available=available,
            image=image)
            return rows



        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            return None
