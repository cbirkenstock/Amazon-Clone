from flask import current_app as app
from flask_login import login_user, logout_user, current_user
from datetime import date

#user = current_user._get_current_object()
#user_id = user.id

'''
CREATE TABLE Products (
    product_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    seller_id INT NOT NULL REFERENCES Sellers(id),
    name VARCHAR(255) NOT NULL,
    quantity INTEGER NOT NULL,
    category VARCHAR(256) NOT NULL,
    description VARCHAR(4096) NOT NULL, 
    price FLOAT NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    image VARCHAR(256) NOT NULL,    
    CHECK (quantity >= 0),
    CHECK (price >= 0)
);
'''

class ProductExtended:
    def __init__(self, product_id, seller_id, name, quantity, category, description, price, available, image, seller_name):
        self.product_id = product_id
        self.seller_id = seller_id
        self.name = name
        self.quantity = quantity
        self.category = category
        self.description = description
        self.price = price
        self.available = available
        self.image = image
        self.seller_name = seller_name

    @staticmethod
    def get_seller_name(name):
        rows = app.db.execute('''
SELECT Products.product_id, Products.seller_id, Products.name, Products.quantity, Products.category, Products.description, Products.price, Products.available, Products.image, Users.name
FROM Products, Users
WHERE Products.seller_id = Users.id
AND available = True
AND Products.name = :name
''',
                              name=name)
        return [ProductExtended(*row) for row in rows]

class Product:
    def __init__(self, product_id, seller_id, name, quantity, category, description, price, available, image):
        self.product_id = product_id
        self.seller_id = seller_id
        self.name = name
        self.quantity = quantity
        self.category = category
        self.description = description
        self.price = price
        self.available = available
        self.image = image

    @staticmethod
    def get(page_size, page_number, product_id):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE product_id = :product_id
AND available = True
LIMIT :page_size OFFSET :page_number*:page_size
''',
                              product_id=product_id)
        return Product(*(rows[0])) if rows is not None else None

    @staticmethod
    def get_all_name(name):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE name = :name
AND available = True
''',
                              name=name)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_name_old(page_size, page_number, name):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE name = :name
AND available = True
LIMIT :page_size OFFSET :page_number*:page_size
''',
                              page_size=page_size,
                              page_number=page_number,
                              name=name)
        return Product(*(rows[0])) if rows is not None else None

    @staticmethod
    def get_all(page_size, page_number):
        
        rows = app.db.execute('''
        SELECT *
        FROM Products
        WHERE available = true
        ORDER BY product_id
        LIMIT :page_size OFFSET :page_number*:page_size
        ''',
        page_size=page_size,
        page_number=page_number)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_all_ASC(page_size, page_number, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE available = True
    ORDER BY price ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE available = True
    ORDER BY name ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_all_DESC(page_size, page_number, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE available = True
    ORDER BY price DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE available = True
    ORDER BY name DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_all_byseller(page_size, page_number, seller_id):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE available = True
AND seller_id = :seller_id
ORDER BY name
LIMIT :page_size OFFSET :page_number*:page_size
''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  seller_id=seller_id)


        return [Product(*row) for row in rows]

    @staticmethod
    def get_name(page_size, page_number, name):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
AND available = True
LIMIT :page_size OFFSET :page_number*:page_size
''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name=name)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_name_ASC(page_size, page_number, name, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY price ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name=name,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY name ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name=name,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_name_DESC(page_size, page_number, name, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY price DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name=name,
                                  sortkey=sortkey)
        
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY name DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name=name,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_category(page_size, page_number, category):
        rows = app.db.execute('''
SELECT *
FROM Products
WHERE category = :category
AND available = True
LIMIT :page_size OFFSET :page_number*:page_size
''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  category=category)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_category_ASC(page_size, page_number, category, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE category = :category
    AND available = True
    ORDER BY price ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  category=category,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE category = :category
    AND available = True
    ORDER BY name ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  category=category,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_category_DESC(page_size, page_number, category, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE category = :category
    AND available = True
    ORDER BY price DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  category=category,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM Products
    WHERE category = :category
    AND available = True
    ORDER BY name DESC
    LIMIT page_size OFFSET page_number*page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  category=category,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_search(page_size, page_number, name, category):
        rows = app.db.execute('''
    SELECT *
    FROM (SELECT *
        FROM Products
        WHERE category = :category
        AND available = True) AS sub
    WHERE name LIKE CONCAT('%', CAST(:name AS varchar), '%') 
    OR description LIKE CONCAT('%', CAST(:name AS varchar), '%')
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name = name,
			          category=category)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_search_ASC(page_size, page_number, name, category, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM (SELECT *
          FROM Products
          WHERE category = :category) AS sub
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY price ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name = name,
                                  category=category,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM (SELECT *
          FROM Products
          WHERE category = :category) AS sub
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY name ASC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name = name,
                                  category=category,
                                  sortkey=sortkey)
        return [Product(*row) for row in rows]

    @staticmethod
    def get_search_DESC(page_size, page_number, name, category, sortkey):
        if sortkey == 'price':
            rows = app.db.execute('''
    SELECT *
    FROM (SELECT *
          FROM Products
          WHERE category = :category) AS sub
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY price DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name = name,
                                  category=category,
                                  sortkey=sortkey)
        if sortkey == 'name':
            rows = app.db.execute('''
    SELECT *
    FROM (SELECT *
          FROM Products
          WHERE category = :category) AS sub
    WHERE (name LIKE CONCAT('%', CAST(:name AS varchar), '%') OR description LIKE CONCAT('%', CAST(:name AS varchar), '%'))
    AND available = True
    ORDER BY name DESC
    LIMIT :page_size OFFSET :page_number*:page_size
    ''',
                                  page_size=page_size,
                                  page_number=page_number,
                                  name = name,
                                  category=category,
                                  sortkey=sortkey)

        return [Product(*row) for row in rows]

    def addProduct(seller_id, name, quantity, category, description, price, available, image):
        try: 
            rows = app.db.execute('''
            INSERT INTO Products(seller_id, name, quantity, category, description, price, available, image)
            VALUES(:seller_id, :name, :quantity, :category, :description, :price, :available, :image)
            RETURNING seller_id
            ''',
            seller_id=seller_id,
            name=name,
            quantity=quantity,
            category=category,
            description=description,
            price=price,
            available=available,
            image=image)
            return rows


        except Exception as ex:
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print(message)
            return None

    @staticmethod
    def makeProductUnavailable(product_id):
        rows = app.db.execute('''
        UPDATE PRODUCTS
        SET available = False
        WHERE product_id = :product_id
        Returning product_id
        ''', 
        product_id=product_id)
        return rows


    @staticmethod
    def updateProduct(product_id, new_quantity):
        rows = app.db.execute('''
        UPDATE Products
        SET quantity = :new_quantity
        WHERE product_id = :product_id
        RETURNING product_id
        ''', 
        product_id=product_id,
        new_quantity=new_quantity)
        return rows
